#!/bin/bash

# Possible parameters
STEP=5
MANAGEMENT_NETWORK=192.168.1.0/24
MANAGEMENT_IP=192.168.1.17
PASSWD_FILE=passwd.txt
QUIET=false
QUIET_APT=true


##################################################################
# START

GENERATED_COMMENT="
# Generated by OS Rocky automated install
"
PASSWDS=( RABBIT_PASS KEYSTONE_DBPASS ADMIN_PASS MYUSER_PASS GLANCE_DBPASS GLANCE_PASS)
INSTALL_MARK="$(date +%F-%T | tr ':' '-')"

exec 5<&1
exec 6<&2
function p_debug() {
	echo "$@" >&6
}
function p_error() {
	echo "$@" >&6
	exit 1
}
function p_info() {
	echo "$@" >&5
}
function check() {
	[ "${!1}" == "true" ] && return 0
	return 1
}
function spin() {
	local pid=$! # Process Id of the previous running command
	local spin='-\|/'
	local i=-1
	while kill -0 $pid 2>/dev/null
	do
		i=$(( (i+1) %4 ))
		printf "\r${spin:$i:1}"
		sleep 1
	done
	[ $i -gt -1 ] && printf "\r"
}
_UNDO=()
function undo() {
	_UNDO=( "$*" "${_UNDO[@]}" )
}
function dumpundo() {
	set +x
	local f
	local O=
	for f in "${_UNDO[@]}"; do
		O="$O
$f"
	done
	p_debug "the system has been modified. To undo the changes please execute: 
$O"
}
trap dumpundo EXIT
BACKEDUP_FILES=()
NEW_FILES=()
function backupfile() {
	if [ -e "$1" ]; then
		BACKEDUP_FILES=( "${BACKEDUP_FILES[@]}" "$1" )
		cp "$1" "${1}.bak.${INSTALL_MARK}"
		undo "cp \"${1}.bak.${INSTALL_MARK}\" \"$1\""
	else
		NEW_FILES=( "${NEW_FILES[@]}" "$1" )
		undo "rm \"$1\""
	fi
}
if check QUIET; then
	exec > /dev/null
fi



if [ "$PASSWD_FILE" == "" ]; then
	PASSWD_FILE=passwd.txt
fi

if [ ! -e "$PASSWD_FILE" ]; then
	p_info "password file $PASSWD_FILE does not exist... creating"
	touch "$PASSWD_FILE"
fi

cp "$PASSWD_FILE" "$PASSWD_FILE.tmp"
_PASSWD_CONTENT="$(cat "$PASSWD_FILE" | sed 's/#.*//g' | sed 's/^[ \t]*//g' | sed '/^$/d')"
eval "$_PASSWD_CONTENT"

_MOD_PASS=
for i in "${PASSWDS[@]}"; do
	if [ "${!i}" == "" ]; then
		p_info "passwd $i is empty... generating"
		read $i <<< "$(pwgen 8 1)"
		echo "export $i=${!i}" >> "$PASSWD_FILE.tmp"
		_MOD_PASS=true
	fi
done

if [ "$_MOD_PASS" != "" ]; then
	p_info "new password file"
	p_info "$(cat "$PASSWD_FILE.tmp")"
	mv "$PASSWD_FILE.tmp" "$PASSWD_FILE"
fi

set -e

function _apt() {
	if check QUIET_APT; then
		(DEBIAN_FRONTEND=noninteractive apt "$@" > /dev/null 2>/dev/null) &
		spin
	else
		DEBIAN_FRONTEND=noninteractive apt "$@"
	fi
}

if ((STEP<=0)); then
p_info "installing and configuring dependencies"
_apt update
_apt -y dist-upgrade
_apt install -y software-properties-common
add-apt-repository -y cloud-archive:rocky > /dev/null 2> /dev/null
_apt install -y chrony mariadb-server python-pymysql python-openstackclient rabbitmq-server memcached python-memcache etcd
undo apt purge -y chrony mariadb-server python-pymysql python-openstackclient rabbitmq-server memcached python-memcache etcd
undo apt autoremove -y --purge
undo add-apt-repository -y -r cloud-archive:rocky

p_info "configuring ntp"
backupfile /etc/chrony/chrony.conf
cat >> /etc/chrony/chrony.conf << EOT 

${GENERATED_COMMENT}
allow ${MANAGEMENT_NETWORK}
EOT
service chrony restart

p_info "configuring mysql"
backupfile /etc/mysql/mariadb.conf.d/99-openstack.cnf
cat > /etc/mysql/mariadb.conf.d/99-openstack.cnf << EOT
${GENERATED_COMMENT}
[mysqld]
bind-address = ${MANAGEMENT_IP}

default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8
EOT
service mysql restart

# mysql_secure_installation

p_info "configuring rabbitmq"
rabbitmqctl add_user openstack "$RABBIT_PASS"
rabbitmqctl set_permissions openstack ".*" ".*" ".*"

sed -i 's/^[ \t]*\(-l .*\)$/# commented by OS Rocky automated install \n# \1/g' /etc/memcached.conf
backupfile /etc/memcached.conf
cat >> /etc/memcached.conf << EOT

${GENERATED_COMMENT}
-l $MANAGEMENT_IP
EOT
service memcached restart

backupfile /etc/default/etcd
cat >> /etc/default/etcd << EOT

${GENERATED_COMMENT}
ETCD_NAME="controller"
ETCD_DATA_DIR="/var/lib/etcd"
ETCD_INITIAL_CLUSTER_STATE="new"
ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster-01"
ETCD_INITIAL_CLUSTER="controller=http://${MANAGEMENT_IP}:2380"
ETCD_INITIAL_ADVERTISE_PEER_URLS="http://${MANAGEMENT_IP}:2380"
ETCD_ADVERTISE_CLIENT_URLS="http://${MANAGEMENT_IP}:2379"
ETCD_LISTEN_PEER_URLS="http://0.0.0.0:2380"
ETCD_LISTEN_CLIENT_URLS="http://${MANAGEMENT_IP}:2379"
EOT
systemctl enable etcd
systemctl start etcd
fi 

if ((STEP<=1)); then
{
cat - << EOT
CREATE DATABASE keystone;
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY '$KEYSTONE_DBPASS';
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY '$KEYSTONE_DBPASS';
EOT
} | mysql -u root
undo "{
cat - << EOT
DROP DATABASE keystone;
DROP USER 'keystone'@'localhost';
DROP USER 'keystone'@'%'
EOT
} | mysql -u root"
fi

if ((STEP<=2)); then
_apt install -y keystone apache2 libapache2-mod-wsgi
undo apt purge -y keystone apache2 libapache2-mod-wsgi
undo apt autoremove -y --purge

backupfile /etc/keystone/keystone.conf

cat > /etc/keystone/keystone.conf << EOT
${GENERATED_COMMENT}
[DEFAULT]
log_dir = /var/log/keystone
[database]
connection = mysql+pymysql://keystone:${KEYSTONE_DBPASS}@controller/keystone
[extra_headers]
Distribution = Ubuntu
[token]
provider = fernet
EOT
fi

if ((STEP<=3)); then
p_info "populating de identity service database"
# si falla aqui, probablemente sea porque hay un problema con mysql (igual no esta
#   bien puesta la IP privada asociada a controller
su keystone -s /bin/sh -c 'keystone-manage db_sync'

p_info "initialize kernet key repository"
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

p_info "bootstrap the identity service"
keystone-manage bootstrap --bootstrap-password "${ADMIN_PASS}" --bootstrap-admin-url http://controller:5000/v3/ --bootstrap-internal-url http://controller:5000/v3/ --bootstrap-public-url http://controller:5000/v3/ --bootstrap-region-id RegionOne
fi

if ((STEP<=4)); then
p_info "configure apache"
backupfile /etc/apache2/apache2.conf
echo "${GENERATED_COMMENT}
ServerName controller" >> /etc/apache2/apache2.conf
service apache2 restart

p_info "creating the admin credentials file admin-openrc"
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD="${ADMIN_PASS}"
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2

backupfile admin-openrc
cat > admin-openrc << EOT
${GENERATED_COMMENT}
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD="${ADMIN_PASS}"
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
EOT

p_info "creating the service project"
openstack project create --domain default --description "Service Project" service

if check INSTALL_DEMOPROJECT; then
	p_info "creating the demo credentials file demo-openrc"
	backupfile demo-openrc
	cat > demo-openrc << EOT
${GENERATED_COMMENT}
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=myproject
export OS_USERNAME=myuser
export OS_PASSWORD="${MYUSER_PASS}"
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
EOT

	p_info "creating the demo project, user and role"
	openstack project create --domain default --description "Demo Project" myproject
	openstack user create --domain default --password "${MYUSER_PASS}"
	openstack role create myrole
	openstack role add --project myproject --user myuser myrole
fi # INSTALL_DEMOPROJECT

fi # INSTALL_KEYSTONE
