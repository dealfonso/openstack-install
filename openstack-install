#!/bin/bash

# Possible parameters
STEP=11
MANAGEMENT_NETWORK=192.168.1.0/24
MANAGEMENT_IP=192.168.1.17
PASSWD_FILE=passwd.txt
QUIET=false
QUIET_APT=true
NETWORK_SELFSERVICE=true


##################################################################
# START

GENERATED_COMMENT="
# Generated by OS Rocky automated install
"
PASSWDS=( RABBIT_PASS KEYSTONE_DBPASS ADMIN_PASS MYUSER_PASS GLANCE_DBPASS GLANCE_PASS NOVA_DBPASS PLACEMENT_DBPASS NOVA_PASS PLACEMENT_PASS METADATA_SECRET NEUTRON_PASS NEUTRON_DBPASS NEUTRON_PASS)
INSTALL_MARK="$(date +%F-%T | tr ':' '-')"

exec 5<&1
exec 6<&2
function p_debug() {
	echo "$@" >&6
}
function p_error() {
	echo "$@" >&6
	exit 1
}
function p_info() {
	echo "$@" >&5
}
function check() {
	[ "${!1}" == "true" ] && return 0
	return 1
}
function spin() {
	local pid=$! # Process Id of the previous running command
	local spin='-\|/'
	local i=-1
	while kill -0 $pid 2>/dev/null
	do
		i=$(( (i+1) %4 ))
		printf "\r${spin:$i:1}"
		sleep 1
	done
	[ $i -gt -1 ] && printf "\r"
}
_UNDO=()
function undo() {
	_UNDO=( "$*" "${_UNDO[@]}" )
}
function dumpundo() {
	set +x
	local f
	local O=
	for f in "${_UNDO[@]}"; do
		O="$O
$f"
	done
	p_debug "the system has been modified. To undo the changes please execute: 
$O"
}
trap dumpundo EXIT
BACKEDUP_FILES=()
NEW_FILES=()
function backupfile() {
	if [ -e "$1" ]; then
		BACKEDUP_FILES=( "${BACKEDUP_FILES[@]}" "$1" )
		cp "$1" "${1}.bak.${INSTALL_MARK}"
		undo "cp \"${1}.bak.${INSTALL_MARK}\" \"$1\""
	else
		NEW_FILES=( "${NEW_FILES[@]}" "$1" )
		undo "rm \"$1\""
	fi
}
if check QUIET; then
	exec > /dev/null
fi



if [ "$PASSWD_FILE" == "" ]; then
	PASSWD_FILE=passwd.txt
fi

if [ ! -e "$PASSWD_FILE" ]; then
	p_info "password file $PASSWD_FILE does not exist... creating"
	touch "$PASSWD_FILE"
fi

cp "$PASSWD_FILE" "$PASSWD_FILE.tmp"
_PASSWD_CONTENT="$(cat "$PASSWD_FILE" | sed 's/#.*//g' | sed 's/^[ \t]*//g' | sed '/^$/d')"
eval "$_PASSWD_CONTENT"

_MOD_PASS=
for i in "${PASSWDS[@]}"; do
	if [ "${!i}" == "" ]; then
		p_info "passwd $i is empty... generating"
		read $i <<< "$(pwgen 8 1)"
		echo "export $i=${!i}" >> "$PASSWD_FILE.tmp"
		_MOD_PASS=true
	fi
done

if [ "$_MOD_PASS" != "" ]; then
	p_info "new password file"
	p_info "$(cat "$PASSWD_FILE.tmp")"
	mv "$PASSWD_FILE.tmp" "$PASSWD_FILE"
fi

set -e

function _apt() {
	if check QUIET_APT; then
		(DEBIAN_FRONTEND=noninteractive apt "$@" > /dev/null 2>/dev/null) &
		spin
	else
		DEBIAN_FRONTEND=noninteractive apt "$@"
	fi
}
function _aptinstall() {
	_apt install -y "$@"
	undo apt autoremove --purge -y
	undo apt purge -y "$@"
}

if ((STEP<=0)); then
p_info "installing and configuring dependencies"
_apt update
_apt -y dist-upgrade
_aptinstall software-properties-common
add-apt-repository -y cloud-archive:rocky > /dev/null 2> /dev/null
_aptinstall chrony mariadb-server python-pymysql python-openstackclient rabbitmq-server memcached python-memcache etcd
undo add-apt-repository -y -r cloud-archive:rocky

p_info "configuring ntp"
backupfile /etc/chrony/chrony.conf
cat >> /etc/chrony/chrony.conf << EOT 

${GENERATED_COMMENT}
allow ${MANAGEMENT_NETWORK}
EOT
service chrony restart

p_info "configuring mysql"
backupfile /etc/mysql/mariadb.conf.d/99-openstack.cnf
cat > /etc/mysql/mariadb.conf.d/99-openstack.cnf << EOT
${GENERATED_COMMENT}
[mysqld]
bind-address = ${MANAGEMENT_IP}

default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8
EOT
service mysql restart

# mysql_secure_installation

p_info "configuring rabbitmq"
rabbitmqctl add_user openstack "$RABBIT_PASS"
rabbitmqctl set_permissions openstack ".*" ".*" ".*"

sed -i 's/^[ \t]*\(-l .*\)$/# commented by OS Rocky automated install \n# \1/g' /etc/memcached.conf
backupfile /etc/memcached.conf
cat >> /etc/memcached.conf << EOT

${GENERATED_COMMENT}
-l $MANAGEMENT_IP
EOT
service memcached restart

backupfile /etc/default/etcd
cat >> /etc/default/etcd << EOT

${GENERATED_COMMENT}
ETCD_NAME="controller"
ETCD_DATA_DIR="/var/lib/etcd"
ETCD_INITIAL_CLUSTER_STATE="new"
ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster-01"
ETCD_INITIAL_CLUSTER="controller=http://${MANAGEMENT_IP}:2380"
ETCD_INITIAL_ADVERTISE_PEER_URLS="http://${MANAGEMENT_IP}:2380"
ETCD_ADVERTISE_CLIENT_URLS="http://${MANAGEMENT_IP}:2379"
ETCD_LISTEN_PEER_URLS="http://0.0.0.0:2380"
ETCD_LISTEN_CLIENT_URLS="http://${MANAGEMENT_IP}:2379"
EOT
systemctl enable etcd
systemctl start etcd
fi 

if ((STEP<=1)); then
{
cat - << EOT
CREATE DATABASE keystone;
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY '$KEYSTONE_DBPASS';
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY '$KEYSTONE_DBPASS';
EOT
} | mysql -u root
undo "{
cat - << EOT
DROP DATABASE keystone;
DROP USER 'keystone'@'localhost';
DROP USER 'keystone'@'%'
EOT
} | mysql -u root"
fi

if ((STEP<=2)); then
_aptinstall keystone apache2 libapache2-mod-wsgi

backupfile /etc/keystone/keystone.conf

cat > /etc/keystone/keystone.conf << EOT
${GENERATED_COMMENT}
[DEFAULT]
log_dir = /var/log/keystone
[database]
connection = mysql+pymysql://keystone:${KEYSTONE_DBPASS}@controller/keystone
[extra_headers]
Distribution = Ubuntu
[token]
provider = fernet
EOT
fi

if ((STEP<=3)); then
p_info "populating de identity service database"
# si falla aqui, probablemente sea porque hay un problema con mysql (igual no esta
#   bien puesta la IP privada asociada a controller
su keystone -s /bin/sh -c 'keystone-manage db_sync'

p_info "initialize kernet key repository"
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

p_info "bootstrap the identity service"
keystone-manage bootstrap --bootstrap-password "${ADMIN_PASS}" --bootstrap-admin-url http://controller:5000/v3/ --bootstrap-internal-url http://controller:5000/v3/ --bootstrap-public-url http://controller:5000/v3/ --bootstrap-region-id RegionOne
fi

if ((STEP<=4)); then
p_info "configure apache"
backupfile /etc/apache2/apache2.conf
echo "${GENERATED_COMMENT}
ServerName controller" >> /etc/apache2/apache2.conf
service apache2 restart

p_info "creating the admin credentials file admin-openrc"
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD="${ADMIN_PASS}"
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2

backupfile admin-openrc
cat > admin-openrc << EOT
${GENERATED_COMMENT}
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD="${ADMIN_PASS}"
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
EOT

p_info "creating the service project"
openstack project create --domain default --description "Service Project" service

if check INSTALL_DEMOPROJECT; then
	p_info "creating the demo credentials file demo-openrc"
	backupfile demo-openrc
	cat > demo-openrc << EOT
${GENERATED_COMMENT}
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=myproject
export OS_USERNAME=myuser
export OS_PASSWORD="${MYUSER_PASS}"
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
EOT

	p_info "creating the demo project, user and role"
	openstack project create --domain default --description "Demo Project" myproject
	openstack user create --domain default --password "${MYUSER_PASS}"
	openstack role create myrole
	openstack role add --project myproject --user myuser myrole
fi # INSTALL_DEMOPROJECT

fi # INSTALL_KEYSTONE

function _mysql() {
	mysql -u root <<< "$1"
}

if ((STEP<=5)); then
	source admin-openrc
	p_info "creating database for glance"
	_mysql "CREATE DATABASE glance;
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY '$GLANCE_DBPASS';
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY '$GLANCE_DBPASS';"
	undo 'mysql -u root <<< "DROP DATABASE glance;
DROP USER '"'"'glance'"'"'@'"'"'localhost'"'"';
DROP USER '"'"'glance'"'"'@'"'"'%'"'"'"'

	p_info "creating glance user"
	openstack user create --domain default --password "$GLANCE_PASS" glance
	openstack role add --project service --user glance admin
	openstack service create --name glance --description "OpenStack Image" image

	p_info "creating endpoints"
	openstack endpoint create --region RegionOne image public http://controller:9292
	openstack endpoint create --region RegionOne image internal http://controller:9292
	openstack endpoint create --region RegionOne image admin http://controller:9292
	undo "# REMOVE GLANCE ENDPOINTS IN KEYSTONE"
fi

if ((STEP<=6)); then
	p_info "installing glance"
	_aptinstall glance
	backupfile /etc/glance/glance-api.conf 
	cat > /etc/glance/glance-api.conf << EOT
[database]
connection = mysql+pymysql://glance:$GLANCE_DBPASS@controller/glance
backend = sqlalchemy
[image_format]
disk_formats = ami,ari,aki,vhd,vhdx,vmdk,raw,qcow2,vdi,iso,ploop.root-tar
[keystone_authtoken]
www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = $GLANCE_PASS
[paste_deploy]
flavor = keystone
[glance_store]
stores = file,http
default_store = file
filesystem_store_datadir = /var/lib/glance/images/
EOT

	backupfile /etc/glance/glance-registry.conf
	cat > /etc/glance/glance-registry.conf << EOT
[database]
connection = mysql+pymysql://glance:$GLANCE_DBPASS@controller/glance
backend = sqlalchemy
[keystone_authtoken]
www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = $GLANCE_PASS
[paste_deploy]
flavor = keystone
EOT

	(su -s /bin/sh -c "glance-manage db_sync" glance) &
	spin

	service glance-registry restart
	service glance-api restart
fi

if ((STEP<=7)); then
	p_info "creating cirros image"
	wget -q http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img -O /tmp/cirros-0.4.0-x86_64-disk.img
	openstack image create "cirros" --file /tmp/cirros-0.4.0-x86_64-disk.img --disk-format qcow2 --container-format bare --public
	undo openstack image delete "cirros"
fi

if ((STEP<=8)); then
	source admin-openrc
	p_info "creating database for nova"
	_mysql "CREATE DATABASE nova_api;
CREATE DATABASE nova;
CREATE DATABASE nova_cell0;
CREATE DATABASE placement;
GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' IDENTIFIED BY '$NOVA_DBPASS';
GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' IDENTIFIED BY '$NOVA_DBPASS';
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' IDENTIFIED BY '$NOVA_DBPASS';
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' IDENTIFIED BY '$NOVA_DBPASS';
GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' IDENTIFIED BY '$NOVA_DBPASS';
GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' IDENTIFIED BY '$NOVA_DBPASS';
GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'localhost' IDENTIFIED BY '$PLACEMENT_DBPASS';
GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%' IDENTIFIED BY '$PLACEMENT_DBPASS';"
	undo 'mysql -u root <<< "DROP DATABASE nova_api;
DROP DATABASE nova;
DROP DATABASE nova_cell0;
DROP DATABASE placement;
DROP USER '"'"'nova'"'"'@'"'"'localhost'"'"';
DROP USER '"'"'nova'"'"'@'"'"'%'"'"';
DROP USER '"'"'placement'"'"'@'"'"'localhost'"'"';
DROP USER '"'"'placement'"'"'@'"'"'%'"'"'"'

	p_info "creating nova user and service"
	openstack user create --domain default --password "$NOVA_PASS" nova
	openstack role add --project service --user nova admin
	openstack service create --name nova --description "OpenStack Compute" compute
	undo openstack user delete nova
	undo openstack service delete nova

	p_info "creating nova endpoints"
	openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1
	openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1
	openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1
	undo "# REMOVE NOVA ENDPOINTS"

	p_info "creating placement user and service"
	openstack user create --domain default --password "$PLACEMENT_PASS" placement	
	openstack role add --project service --user placement admin
	openstack service create --name placement --description "Placement API" placement
	undo openstack user delete placement
	undo openstack service delete placement

	p_info "creating placement endpoints"
	openstack endpoint create --region RegionOne placement public http://controller:8778
	openstack endpoint create --region RegionOne placement internal http://controller:8778
	openstack endpoint create --region RegionOne placement admin http://controller:8778
	undo "# REMOVE PLACEMENT ENDPOINTS"
fi

if ((STEP<=9)); then
	source admin-openrc
	_aptinstall nova-api nova-conductor nova-consoleauth nova-novncproxy nova-scheduler nova-placement-api
	
	backupfile /etc/nova/nova.conf
	cat > /etc/nova/nova.conf << EOT
[DEFAULT]
lock_path = /var/lock/nova
state_path = /var/lib/nova
transport_url = rabbit://openstack:$RABBIT_PASS@controller
my_ip = $MANAGEMENT_IP
use_neutron = true
firewall_driver = nova.virt.firewall.NoopFirewallDriver
[api]
auth_strategy = keystone
[api_database]
connection = mysql+pymysql://nova:$NOVA_DBPASS@controller/nova_api
[cells]
enable = False
[database]
connection = mysql+pymysql://nova:$NOVA_DBPASS@controller/nova
[glance]
api_servers = http://controller:9292
[keystone_authtoken]
auth_url = http://controller:5000/v3
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = nova
password = $NOVA_PASS
[neutron]
url = http://controller:9696
auth_url = http://controller:5000
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = $NEUTRON_PASS
service_metadata_proxy = true
metadata_proxy_shared_secret = $METADATA_SECRET
[oslo_concurrency]
lock_path = /var/lib/nova/tmp
[placement]
os_region_name = openstack
region_name = RegionOne
project_domain_name = Default
project_name = service
auth_type = password
user_domain_name = Default
auth_url = http://controller:5000/v3
username = placement
password = $PLACEMENT_PASS
[placement_database]
connection = mysql+pymysql://placement:$PLACEMENT_DBPASS@controller/placement
[scheduler]
discover_hosts_in_cells_interval = 300
[vnc]
enabled = true
server_listen = \$my_ip
server_proxyclient_address = \$my_ip
EOT
	p_info "populating nova-api and placement databases"
	( su -s /bin/sh -c "nova-manage api_db sync" nova ) &
	spin

	p_info "registering cells"
	su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova
	su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova

	p_info "populating nova database"
	su -s /bin/sh -c "nova-manage db sync" nova

	p_info "restarting services"	
	service nova-api restart
	service nova-consoleauth restart
	service nova-scheduler restart
	service nova-conductor restart
	service nova-novncproxy restart
fi

if ((STEP<=10)); then
        source admin-openrc
        p_info "creating database for neutron"
        _mysql "CREATE DATABASE neutron;
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY '$NEUTRON_DBPASS';
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY '$NEUTRON_DBPASS';"
        undo 'mysql -u root <<< "DROP DATABASE neutron;
DROP USER '"'"'neutron'"'"'@'"'"'localhost'"'"';
DROP USER '"'"'neutron'"'"'@'"'"'%'"'"'"'

        p_info "creating neutron user and service"
        openstack user create --domain default --password "$NEUTRON_PASS" neutron
        openstack role add --project service --user neutron admin
	openstack service create --name neutron --description "OpenStack Networking" network

        undo openstack user delete neutron
        undo openstack service delete neutron

        p_info "creating neutron endpoints"
	openstack endpoint create --region RegionOne network public http://controller:9696
	openstack endpoint create --region RegionOne network internal http://controller:9696
	openstack endpoint create --region RegionOne network admin http://controller:9696
fi

if ((STEP<=11)); then
	if check NETWORK_SELFSERVICE; then
		_aptinstall neutron-server neutron-plugin-ml2 neutron-linuxbridge-agent neutron-l3-agent neutron-dhcp-agent neutron-metadata-agent
	fi
fi
